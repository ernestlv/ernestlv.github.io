/* <<< DO NOT EDIT THIS FILE - CONCATENATED FILES -Mon Apr 25 2016 11:36:37 GMT-0400 (EDT)>>> */

/*!
 * JavaScript Cookie v2.1.0
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		define(factory);
	} else if (typeof exports === 'object') {
		module.exports = factory();
	} else {
		var _OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = _OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function init (converter) {
		function api (key, value, attributes) {
			var result;

			// Write

			if (arguments.length > 1) {
				attributes = extend({
					path: '/'
				}, api.defaults, attributes);

				if (typeof attributes.expires === 'number') {
					var expires = new Date();
					expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
					attributes.expires = expires;
				}

				try {
					result = JSON.stringify(value);
					if (/^[\{\[]/.test(result)) {
						value = result;
					}
				} catch (e) {}

				if (!converter.write) {
					value = encodeURIComponent(String(value))
						.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
				} else {
					value = converter.write(value, key);
				}

				key = encodeURIComponent(String(key));
				key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
				key = key.replace(/[\(\)]/g, escape);

				return (document.cookie = [
					key, '=', value,
					attributes.expires && '; expires=' + attributes.expires.toUTCString(), // use expires attribute, max-age is not supported by IE
					attributes.path    && '; path=' + attributes.path,
					attributes.domain  && '; domain=' + attributes.domain,
					attributes.secure ? '; secure' : ''
				].join(''));
			}

			// Read

			if (!key) {
				result = {};
			}

			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all. Also prevents odd result when
			// calling "get()"
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var rdecode = /(%[0-9A-Z]{2})+/g;
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var name = parts[0].replace(rdecode, decodeURIComponent);
				var cookie = parts.slice(1).join('=');

				if (cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					cookie = converter.read ?
						converter.read(cookie, name) : converter(cookie, name) ||
						cookie.replace(rdecode, decodeURIComponent);

					if (this.json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					if (key === name) {
						result = cookie;
						break;
					}

					if (!key) {
						result[name] = cookie;
					}
				} catch (e) {}
			}

			return result;
		}

		api.get = api.set = api;
		api.getJSON = function () {
			return api.apply({
				json: true
			}, [].slice.call(arguments));
		};
		api.defaults = {};

		api.remove = function (key, attributes) {
			api(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));
!function(t,e){if("function"==typeof define&&define.amd)define(["videojs"],e);else if("object"==typeof exports){var r=void 0;try{r=require("video.js")}catch(n){}module.exports=e(r)}else t.Projector=e(t.videojs)}(this,function(t){"use strict";var e=0,r=function(t,r,n){n=n||!1;var i=this;if(this.element=t,this.coptions=r,this.overlays=[],this.vjs=n,n)this.wrapper=t.el(),t.addEventListener=t.on,t.projector=this;else{var o=t.parentNode,s=document.createElement("div");s.setAttribute("data-projectorid",e),s.setAttribute("class","projector-wrapper"),o.replaceChild(s,t),s.appendChild(t),this.wrapper=s,t.addEventListener("loadedmetadata",function(){var e=t.offsetHeight,r=t.offsetWidth;i.wrapper.style.height=e+"px",i.wrapper.style.width=r+"px"})}r&&r.overlays&&r.overlays.forEach(function(t){t.overlay;i.addOverlay(t.overlay,t)}),t.addEventListener("fullscreenchange",function(){for(var t=document.getElementsByClassName("projector-overlay"),e=0;e<t.length;e++)t[e].style.fontSize=.01*i.wrapper.offsetWidth+"px"}),t.addEventListener("timeupdate",function(){i.getSeeking()?i.updateOverlays(!0):i.updateOverlays()}),e++};r.prototype.updateOverlays=function(t){var e=this.getCurrentTime();this.overlays.forEach(function(r){r.update(e,t)})},r.prototype.setPositionAttributes=function(t,e){["top","right","left","bottom","height","width"].forEach(function(r){e[r]&&(t.style[r]=e[r])})},r.prototype.unwindTimings=function(t){var e=[];return t.forEach(function(t){if(t.timing){var r=t.timing.split(",");r.forEach(function(r){var n={},i=r.split("-");n.start=i[0],n.end=i[1],n.beforeBeginOverlay=t.beforeBeginOverlay,n.afterBeginOverlay=t.afterBeginOverlay,n.beforeEndOverlay=t.beforeEndOverlay,n.afterEndOverlay=t.afterEndOverlay,e.push(n)})}else e.push(t)}),e},r.prototype.getCurrentTime=function(){return this.vjs?this.element.currentTime():this.element.currentTime},r.prototype.getSeeking=function(){return this.vjs?this.element.seeking():this.element.seeking},r.prototype.addOverlay=function(t,e){var r=this,n=document.createElement("div");return n.setAttribute("class","projector-overlay"),this.setPositionAttributes(n,e),n.appendChild(t.el),n.style.fontSize=.01*this.wrapper.offsetWidth+"px",t.wrapper=n,t.__timings=this.unwindTimings(e.timings),t.__timings.forEach(function(e){["start","end"].forEach(function(n){"string"==typeof e[n]&&r.element.addEventListener(e[n],function(){var i=r.getCurrentTime();"start"===n?t.__runBeginOverlay(e,i,!1):t.__runEndOverlay(e,i,!1)})})}),this.overlays.push(t),this.wrapper.insertBefore(n,this.wrapper.childNodes[0]),this};var n=function(){var t=Array.prototype.slice.call(arguments);t.shift(),"function"==typeof arguments[0]&&arguments[0].apply(this,t)},i=function(){var t=function(e){var r=Object.create(t.prototype);return r.init(e),r};return t.prototype={},t.prototype.options={},t.prototype.element=void 0,t.prototype.class="",t.prototype.init=function(t){return this.options=t||{},this.options.attrs=this.options.attrs||{},this.el=this.render(),this},t.prototype.render=function(){var t=this,e=document.createElement("div");e.style.display="none",e.setAttribute("class",t.class+" projector-overlay-item");for(var r in this.options.attrs)"class"===r?e.setAttribute(r,t.class?t.class+" "+this.options.attrs[r]:this.options.attrs[r]):e.setAttribute(r,this.options.attrs[r]);return e},t.prototype.isActive=function(){return this.__timings.some(function(t){return t.active===!0})},t.prototype.__runBeginOverlay=function(t,e,r){var i=this;n(t.beforeBeginOverlay,this,e,r),this.beginOverlay(function(){n(t.afterBeginOverlay,i,e,r)},e,r),t.active=!0},t.prototype.__runEndOverlay=function(t,e,r){var i=this;n(t.beforeEndOverlay,this,e,r),this.endOverlay(function(){n(t.afterEndOverlay,i,e,r)},e,r),t.active=!1},t.prototype.beginOverlay=function(t){this.el.style.display="block",t()},t.prototype.endOverlay=function(t){this.el.style.display="none",t()},t.prototype.update=function(t,e){var r=this;e=e||!1,this.__timings.forEach(function(n){!n.active&&(t>=n.start&&t<=n.end||t>=n.start&&void 0===n.end)?r.__runBeginOverlay(n,t,e):n.active&&(t<n.start||t>n.end)&&r.__runEndOverlay(n,t,e)})},t}(),o=function(){var t=function(e){var r=Object.create(t.prototype);return r.init(e),r};return t.prototype=Object.create(i.prototype),t.prototype.class="projector-textbox",t.prototype.init=function(){i.prototype.init.apply(this,arguments)},t.prototype.render=function(){var t=i.prototype.render.call(this);return t.innerHTML=this.options.text,t},t}(),s=function(){var t=function(e){var r=Object.create(t.prototype);return r.init(e),r};return t.prototype=Object.create(i.prototype),t.prototype.init=function(){i.prototype.init.apply(this,arguments)},t.prototype.render=function(){var t=i.prototype.render.call(this);return t.innerHTML=this.options.html,t},t}(),a={VERSION:"0.1.0",init:function(t,e){return"string"==typeof t&&(t=document.getElementById(t)),new r(t,e)},initVjs:function(t){return this.projector=new r(this,t,!0),this.projector}};return t&&t.plugin("projector",a.initVjs),a.Overlay=i,a.TextBox=o,a.HTMLBox=s,a});

/*eslint-disable */
  var AnimatedScrolling = {
    init: function() {
      this.settings = {
        $triggers: $('.js-animate-scroll'),
        scrollOffset: 0,
        speed: 800
      };
      AnimatedScrolling.bind();
    },

    destroy: function() {
        if( AnimatedScrolling.settings && AnimatedScrolling.settings.$triggers ){
            AnimatedScrolling.settings.$triggers.off('click');
        }

        AnimatedScrolling.settings = null;
    },

    bind: function() {
      AnimatedScrolling.settings.$triggers.click( function() {
        var clickedLink = this;
        if ( AnimatedScrolling.checkSamePage(clickedLink) ) {
          AnimatedScrolling.doScroll(clickedLink);
          return false; // don't jump to hash
        }
      });
    },
    checkSamePage: function(clickedLink) {
      if (location.pathname.replace(/^\//,'') === clickedLink.pathname.replace(/^\//,'') && location.hostname === clickedLink.hostname) {
        return true;
      }
      else {
        return false;
      }
    },
    doScroll: function(clickedLink) {
      var $target = $(clickedLink.hash);
      $target = $target.length ? $target : $('[name=' + clickedLink.hash.slice(1) +']');
      if ($target.length) {

        var scrollAmount = $target.offset().top - AnimatedScrolling.settings.scrollOffset;

        $('html,body').animate({
          scrollTop: scrollAmount
        }, AnimatedScrolling.settings.speed);
      }
    }
  };

var BannerJump = {

	init: function() {

		this.settings = {
			$productWindow: $(window),
			$banners: $('.product-hero__head'),
			$bannerLinks: $('.product-hero__head a'),
		};

		BannerJump.bind();
		// set scroll speed here:
		BannerJump.animationSpeed = 800;
	},

	destroy: function() {
		// Remove the event listener
		if( BannerJump.settings && BannerJump.settings.$banner){
			BannerJump.settings.$banners.off('click', scrollToAnchor );
		}

		// Reclaim the varaibles
		BannerJump.settings = null;
	},

	bind: function() {
		BannerJump.setCursor(this.settings.$productWindow, this.settings.$banners);
		this.settings.$banners.on('click', BannerJump.scrollToAnchor);
	},

	scrollToAnchor: function(evt) {
		var $bannerLink = $(this).children('a');
		var href 		= $bannerLink.attr('href');
		var top  		= $(href).offset().top - 60;

		// prevent anchor click default event
		evt.preventDefault();

		// scroll the window to the jump link section
		$('html,body').animate({
		  scrollTop: top
		}, BannerJump.animationSpeed);
	},

	setCursor: function($productWindow, $banners) {
		this.settings.$banners.each(function() {
			var $banner = $(this);

			// set cursor to show clickability
			$banner.css('cursor', 'pointer');
		});
	}
};

/*eslint-disable */
  var DifferenceWeBelieve = {

    init: function() {
      DifferenceWeBelieve.bind();
    },

    destroy: function() {
      this.destroyAllScenes();
    },

    bind: function() {
      var controller = new ScrollMagic.Controller(),
          slideSlugs = [
            'safety',
            'comfort',
            'trust',
            'say',
            'understand'
          ];

      if ( ! Modernizr.touch  ) {
        DifferenceWeBelieve.fadeOutIntroText(controller);

        for (var i = 0; i < 5; i++) {
          var slug           = slideSlugs[i],
              slide          = '.difference-believe__item--' + slug,
              slideBg        = '.difference-believe__bg--' + slug,
              slideLettering = '.difference-believe__lettering--' + slug,
              tween          = new TimelineMax();

          DifferenceWeBelieve.setTween(tween, slideBg, slideLettering);
          DifferenceWeBelieve.setActiveBackground(slide, tween, slideBg, controller);

        } // end for

        DifferenceWeBelieve.setLastSlideVisible(controller);
      } // end if
    },

    destroyAllScenes: function() {
      if (this.sceneIntroText) { this.sceneIntroText.destroy(); }
      if (this.sceneActiveBackground) { this.sceneActiveBackground.destroy(); }
      if (this.sceneLastSlide) { this.sceneLastSlide.destroy(); }
      this.sceneIntroText = null;
      this.sceneActiveBackground = null;
      this.sceneLastSlide = null;
    },

    fadeOutIntroText: function(controller) {
      // Create new scroll magic scene that fades out the "we believe" intro text
      this.sceneIntroText = new ScrollMagic.Scene({
          triggerElement: '.difference-believe',
          triggerHook: 'onLeave'
        })
        .setPin('.difference-believe__bg-wrap')
        .setClassToggle('.difference-believe__head--first', 'js-is-muted')
        .addTo(controller);
    },

    setTween: function(tween, slideBg, slideLettering) {
      // Simultaneous tweening of different elements
      tween.insert( TweenMax.to( slideBg, 1, {scale: 1} ));
      tween.insert( TweenMax.fromTo( slideLettering, 1, {opacity: '0'}, {opacity: '1'} ));
    },

    setActiveBackground: function(slide, tween, slideBg, controller) {
      // create new scroll magic scene that sets the corresponding background image to active (making it visible)
      this.sceneActiveBackground = new ScrollMagic.Scene({
            triggerElement: slide,
            triggerHook: 'onEnter',
            duration: '100%',
            offset: '250'
          })
          .setTween(tween)
          .setClassToggle(slideBg, 'js-is-active')
          .addTo(controller);
    },

    setLastSlideVisible: function(controller) {
      // Create scroll magic scene that sets its opacity to 1 so it doesn't disappear when scrolling past.
      this.sceneLastSlide = new ScrollMagic.Scene({
          triggerElement: '.difference-believe__item--understand',
          offset: '250',
          duration: '0'
        })
        .setClassToggle('.difference-believe__bg--understand', 'js-is-last')
        .addTo(controller);

    }

  };

/*eslint-disable */
var FAQSubnav = {

  init: function() {
    this.settings = {
      $body: $('body'),
      $nav: $('.faq-subnav'),
      $list: $('.faq-subnav__list'),
      $links: $('.js-category-name a'),
      itemClass: 'js-category-name',
      itemActiveClass: 'faq-subnav__item--active'
    }

    this.settings.debounceFunc = Utilities.debounce(function() {
        FAQSubnav.findActiveSection($('.js-category-section'), this, FAQSubnav.settings.$list);
    }, 30),

    FAQSubnav.bind();
  },

  destroy: function() {
      // Clean all event listeners
      if( FAQSubnav.settings ){
        FAQSubnav.settings.$body.off('click', '.faq-subnav__link', FAQSubnav.faqSubnavClickCallBack);
        $(window).off('scroll', FAQSubnav.settings.debounceFunc );
      }
      // Reclaim the settings to release the object
      FAQSubnav.settings = null;
  },

  bind: function() {
    FAQSubnav.setActiveSection();
    FAQSubnav.settings.$body.on('click', '.faq-subnav__link', FAQSubnav.faqSubnavClickCallBack);
  },

  faqSubnavClickCallBack: function(evt) {
      var $link         = $(this),
          linkHref      = $link.attr('href'),
          $linkSection  = $('.faq-articles').find('.js-category-section' + linkHref),
          sectionTop    = $linkSection.offset().top - 130,
          $linkItem     = $link.closest('.' + FAQSubnav.settings.itemClass),
          $allLinkItems = $('.' + FAQSubnav.settings.itemClass),
          faqWindow     = window,
          nthPosition   = $linkItem.index() + 1;

      evt.preventDefault();

      if ($linkItem.hasClass(FAQSubnav.settings.itemActiveClass) ) {
        // Toggle subnav open and close when a subnav link is clicked
        FAQSubnav.settings.$body.toggleClass('js-faq-subnav-is-open');
      } else {
        // Close subnav when link is clicked...
        FAQSubnav.settings.$body.removeClass('js-faq-subnav-is-open');

        // Go to section in link less the nav height
        $(faqWindow).scrollTop(sectionTop);

        FAQSubnav.clearActiveItem(FAQSubnav.settings.$list);
        FAQSubnav.setActiveItem($linkItem);
        FAQSubnav.clearListItemsPositions(FAQSubnav.settings.$list);
        FAQSubnav.rotateItemPostion(FAQSubnav.settings.$list, nthPosition);
      }
  },

  setActiveSection: function() {
    var $sections    = $('.js-category-section'),
        $subnavList  = FAQSubnav.settings.$list;

    FAQSubnav.findActiveSection($sections, window, $subnavList);

    $(window).on('scroll', this.settings.debounceFunc );
  },


  findActiveSection: function($sections, window, $subnavList) {
    var $faqWindow            = $(window),
        currentPositionTop    = $faqWindow.scrollTop(),
        currentPositionMiddle = $faqWindow.scrollTop() + ($faqWindow.height()/2),
        currentPositionBottom = $faqWindow.scrollTop() + $faqWindow.height();

    $sections.each(function() {
      var $section         = $(this),
          $sectionLinkItem = $subnavList.find('.js-category-name a[href="#'+ $section.attr('id')+'"]').parent(),
          secTop           = $section.offset().top,
          secBottom        = secTop + $section.outerHeight(),
          nthPosition      = $sectionLinkItem.index() + 1;

      if ( currentPositionMiddle >= secTop && currentPositionMiddle <= secBottom ) {
        FAQSubnav.clearActiveItem($subnavList);
        FAQSubnav.clearListItemsPositions($subnavList);
        FAQSubnav.setActiveItem($sectionLinkItem);
        FAQSubnav.rotateItemPostion($subnavList, nthPosition);
      }
    });
  },

  clearListItemsPositions: function($subnavList) {
    $subnavList.removeClass('faq-subnav__list--nth-active-1 faq-subnav__list--nth-active-2 faq-subnav__list--nth-active-3 faq-subnav__list--nth-active-4 faq-subnav__list--nth-active-5 faq-subnav__list--nth-active-6');
  },

  clearActiveItem: function($subnavList) {
    $subnavList.find('.js-category-name.faq-subnav__item--active').removeClass('faq-subnav__item--active');
  },

  setActiveItem: function($linkItem) {
    $linkItem.addClass('faq-subnav__item--active');
  },

  rotateItemPostion: function($subnavList, nthPosition) {
    // Set position of link item that is active so that it shows as the title when the subnav closes
    $subnavList.addClass('faq-subnav__list--nth-active-' + nthPosition);
  }
};

/*eslint-disable */
// var FormProgress = {
//   init: function() {
//     this.settings = {
//       $forms: $('.js-has-progress-bar'),
//       formGroups: '.js-validate-group',
//       inputsToWatch: '.js-validate-input',
//     };
//     FormProgress.bind();
//   },
//   bind: function() {
//     FormProgress.settings.$forms.each(function(){
//
//       var $form               = $(this),
//           $barContainer       = $('#' + $form.data('progress-bar')),
//           $bar                = $barContainer.find('.progress__el'),
//           $counter            = $barContainer.find('.progress__counter'),
//           $formGroups         = $form.find(FormProgress.settings.formGroups),
//           validGroupSelector  = '.js-validate-group[data-group-answered="true"]',
//           barMax              = $bar.attr('max'),
//           groupsAnsweredCount = $(validGroupSelector).length;
//
//       // Set progress bar and count on load
//       FormProgress.updateProgressBar($bar, groupsAnsweredCount, barMax);
//       FormProgress.updateProgressCounter($counter, groupsAnsweredCount, $barContainer, barMax, $form);
//
//       $formGroups.each(function() {
//         var $formGroup        = $(this),
//             $formGroupInputs  = $formGroup.find(FormProgress.settings.inputsToWatch),
//             inputsCount       = $formGroupInputs.length,
//             validInputsCount  = 0;
//
//         $formGroupInputs.on('keyup blur change',function() {
//           var $input = $(this),
//               inputName,
//               newGroupsAnsweredCount;
//
//           FormProgress.checkValidity($input);
//
//           // Update valid inputs count
//           validInputsCount = $formGroup.find($('[data-input-valid="true"]')).length;
//
//           FormProgress.setGroupAnsweredStatus(validInputsCount, inputsCount, $formGroup);
//
//           newGroupsAnsweredCount = $(validGroupSelector).length;
//           FormProgress.updateProgressBar($bar, newGroupsAnsweredCount, barMax);
//           FormProgress.updateProgressCounter($counter, newGroupsAnsweredCount, $barContainer, barMax, $form);
//
//         }); // inputs change
//       }); // items each
//
//       updateFormGroupOnInput = function($formGroup, $formGroupInputs, inputsCount, $input){
//         var $input = $(this),
//             inputName,
//             newGroupsAnsweredCount;
//
//         FormProgress.checkValidity($input);
//
//         // Update valid inputs count
//         var validInputsCount = $formGroup.find($('[data-input-valid="true"]')).length;
//
//         FormProgress.setGroupAnsweredStatus(validInputsCount, inputsCount, $formGroup);
//
//         newGroupsAnsweredCount = $(validGroupSelector).length;
//         FormProgress.updateProgressBar($bar, newGroupsAnsweredCount, barMax);
//         FormProgress.updateProgressCounter($counter, newGroupsAnsweredCount, $barContainer, barMax, $form);
//       }
//     }); // forms each
//   },
//
//   setGroupAnsweredStatus: function(validInputsCount, inputsCount, $formGroup){
//     if ( validInputsCount === inputsCount ) {
//       FormProgress.flagGroupAsAnswered($formGroup);
//     } else {
//       FormProgress.flagGroupAsUnanswered($formGroup);
//     }
//   },
//
//   flagGroupAsUnanswered: function($formGroup){
//     $formGroup.removeAttr('data-group-answered');
//   },
//
//   flagGroupAsAnswered: function($formGroup){
//     $formGroup.attr('data-group-answered', 'true');
//   },
//
//   updateProgressBar: function($bar, val, max) {
//     var pctComplete = val / max * 100 + '%';
//
//     $bar.attr('value',val);
//     $bar.find('.progress__content').css('width', pctComplete);
//   },
//
//   updateProgressCounter: function($counter, count, $barContainer, barMax) {
//     $counter.html(count);
//
//     if (barMax === count) {
//       $barContainer.addClass('progress--complete');
//     }
//     else {
//       $barContainer.removeClass('progress--complete');
//     }
//   },
//
//   // If input is not valid remove data attr.
//   // If it is valid add data attr to it and any other inputs with the same name.
//   checkValidity: function($input) {
//     if (!$input[0].validity.valid) {
//       $input.removeAttr("data-input-valid");
//     } else {
//       $input.attr("data-input-valid", "true");
//       inputName = $input.attr('name');
//       $(".js-validate-input[name=" + inputName + "]").attr("data-input-valid", "true");
//     }
//   }
// };

/*eslint-disable */
var HeroFadeIn = {
  settings: {
    $hero: $('.js-hero-fadein')
  },
  init: function() {
    HeroFadeIn.bind();
  },
  bind: function() {
    HeroFadeIn.settings.$hero.addClass('js-is-active');
  }
};

/*eslint-disable */
var LearnSubnav = {
  init: function() {
    this.settings = {
      $body: $('body'),
      $nav: $('.learn-subnav'),
      $list: $('.learn-subnav__list'),
      $links: $('.learn-subnav__link'),
      itemClass: 'learn-subnav__item',
      itemActiveClass: 'learn-subnav__item--active',
      itemNames: [
        'about',
        'coverage',
        'options',
        'apply',
        'current'
      ],
      linkActiveClass: 'learn-subnav__link--active'
    };

    this.settings.learnSubNavClickCallBack = function(event){
        if ( $(this).closest('.' + LearnSubnav.settings.itemClass).hasClass(LearnSubnav.settings.itemActiveClass) ) {
          LearnSubnav.settings.$body.toggleClass('js-learn-subnav-is-open');
          event.preventDefault();
        }
    };
    LearnSubnav.bind();
  },
  destroy: function(){
    // Remove event listener
    if ( LearnSubnav.settings ) {
        LearnSubnav.settings.$links.off('click', this.settings.learnSubNavClickCallBack);
    }
    // Reclaim varaibles
    this.settings = null;
  },
  bind: function() {
    // highlight active section
    LearnSubnav.highlightActiveSection();

    // on trigger click, intercept if it's the active one
    LearnSubnav.settings.$links.click(this.settings.learnSubNavClickCallBack);
  },
  highlightActiveSection: function() {
    // check URL segment and test against the <li> class,
    // which is in the format global-header__section-item--SEGMENT
    var urlPartsArray  = window.location.pathname.split( '/' ); //
    var activeSection  = urlPartsArray[1].replace('.html',''); // something like 'learn-about'
    var activeSectionSlug = activeSection.replace('learn-',''); // something like 'about'

    var itemIndex = LearnSubnav.settings.itemNames.indexOf(activeSectionSlug);

    // set class on ul
    LearnSubnav.settings.$list.addClass('learn-subnav__list--nth-active-' + (itemIndex + 1));

    // add class to list item
    $('.learn-subnav__item--' + activeSectionSlug).addClass(LearnSubnav.settings.itemActiveClass);

    // add class to link
    $('.learn-subnav__link--' + activeSectionSlug).addClass(LearnSubnav.settings.linkActiveClass);
  }
};

/* global VideoElements, TimelineMax:false, TweenMax:false, Power1: false, Expo: false */
/* eslint-disable */
var LetteringAnimation = {
	init: function() {
		this.settings = {
			$svgPathsEn: $('.lettering-animation--home path:not(defs path)'),
			$svgPathsEs: $('.lettering-animation--home--es path:not(defs path)'),
			$svgEn: $('.lettering-animation--home--en'),
			$svgEs: $('.lettering-animation--home--es'),
			$videoPlayButtonEn: $('.video__play-button--home'),
            $videoPlayButtonEs: $('.video__play-button--home-es')
		};
		LetteringAnimation.bind();
	},

	bind: function() {
		var isIphone = false;
		if((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i))) {
	 		isIphone = true;
		}

		// For each path, set the stroke-dasharray and stroke-dashoffset
        // equal to the path's total length, hence rendering it invisible
        //

      	LetteringAnimation.settings.$svgPathsEn.each(function(i, e) {
      		e.style.strokeDasharray = e.style.strokeDashoffset = e.getTotalLength();
      	});

      	LetteringAnimation.settings.$svgPathsEs.each(function(i, e) {
      		e.style.strokeDasharray = e.style.strokeDashoffset = e.getTotalLength();
      	});

        if (!isIphone) {
            TweenMax.set(LetteringAnimation.settings.$videoPlayButtonEn, { x: '-30%' });
            TweenMax.set(LetteringAnimation.settings.$videoPlayButtonEs, { x: '-30%' });
        }

      	VideoElements.valoraVideo.ready(function(){
      		if(!isIphone && !$('.spanish-is-active').length) {
      			LetteringAnimation.animateHomeEn();
      		} else {
      			LetteringAnimation.animateHomeEs();
      		}
      	});
	},

	animateHomeEn: function() {
		var tl = new TimelineMax();

		tl.add([
		// Video Js Big Play Button
		TweenMax.to(LetteringAnimation.settings.$videoPlayButtonEn, 0.5, {
    		ease: Expo.easeOut,
    		opacity: 1,
    		x: '0%',
    		delay: 2
    	}),
			// A
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEn.eq(0), 2, {
    		strokeDashoffset: 0,
    		ease: Power1.easeOut,
    		opacity: 1,
    		delay: 0.0
    	}),
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEn.eq(1), 1, {
				strokeDashoffset: 0,
				ease: Power1.easeOut,
				opacity: 1,
				delay: 0.0
    	}),
    	// Promise
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEn.eq(2), 2, {
				strokeDashoffset: 0,
				ease: Power1.easeOut,
				opacity: 1,
				delay: 0.0
    	}),
    	// Promise Dot
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEn.eq(3), 1, {
				strokeDashoffset: 0,
				ease: Power1.easeOut,
				opacity: 1,
				delay: 0.5
    	}),
    	// Made
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEn.eq(4), 2, {
				strokeDashoffset: 0,
				ease: Power1.easeOut,
				opacity: 1,
				delay: 0.0
    	}),
    	// Ribbon
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEn.eq(5), 0.5, {
				strokeDashoffset: 0,
				ease: Power1.easeOut,
				opacity: 1,
				delay: 1.5
    	}),
    	// Ribbon
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEn.eq(6), 0.5, {
				strokeDashoffset: 0,
				ease: Power1.easeOut,
				opacity: 1,
				delay: 1.75
    	}),
    	// Simple
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEn.eq(7), 2, {
				strokeDashoffset: 0,
				ease: Power1.easeOut,
				opacity: 1,
				delay: 0.0
    	}),
    	// Simple Dot
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEn.eq(8), 1, {
				strokeDashoffset: 0,
				ease: Power1.easeOut,
				opacity: 1,
				delay: 1.2
    	}),
    	TweenMax.to(LetteringAnimation.settings.$svgEs, 0, {
    		css:{
    			className:'+=en-is-animated'
    		}
      })
		]);
	},

		animateHomeEs: function() {
		var tl = new TimelineMax();

		tl.add([
			// Video Js Big Play Button
		TweenMax.to(LetteringAnimation.settings.$videoPlayButtonEs, 0.5, {
    		ease: Expo.easeOut,
    		opacity: 1,
    		x: '0%',
    		delay: 2.25
    	}),
			// Ayudandote
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEs.eq(0), 2, {
    		strokeDashoffset: 0,
    		ease: Power1.easeOut,
    		opacity: 1,
    		delay: 0.0
    	}),
    	// Ayudandote Accent
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEs.eq(1), 0.5, {
    		strokeDashoffset: 0,
    		ease: Power1.easeOut,
    		opacity: 1,
    		delay: 1
    	}),
    	// Ayudandote T
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEs.eq(2), 0.5, {
    		strokeDashoffset: 0,
    		ease: Power1.easeOut,
    		opacity: 1,
    		delay: 1.2
    	}),
    	// a
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEs.eq(3), 2, {
    		strokeDashoffset: 0,
    		ease: Power1.easeOut,
    		opacity: 1,
    		delay: 0.0
    	}),
    	// C
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEs.eq(4), 0.8, {
    		strokeDashoffset: 0,
    		ease: Power1.easeOut,
    		opacity: 1,
    		delay: 0.8
    	}),
    	// umplir
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEs.eq(5), 1, {
    		strokeDashoffset: 0,
    		ease: Power1.easeOut,
    		opacity: 1,
    		delay: 1
    	}),
    	// i dot
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEs.eq(6), 0.5, {
    		strokeDashoffset: 0,
    		ease: Power1.easeOut,
    		opacity: 1,
    		delay: 1.5
    	}),
    	// tu
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEs.eq(7), 0.5, {
    		strokeDashoffset: 0,
    		ease: Power1.easeOut,
    		opacity: 1,
    		delay: 2
    	}),
    	// t
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEs.eq(8), 0.5, {
    		strokeDashoffset: 0,
    		ease: Power1.easeOut,
    		opacity: 1,
    		delay: 2
    	}),
    	// P
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEs.eq(9), 1.5, {
    		strokeDashoffset: 0,
    		ease: Power1.easeOut,
    		opacity: 1,
    		delay: 0
    	}),
    	// romesa
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEs.eq(10), 2, {
    		strokeDashoffset: 0,
    		ease: Power1.easeOut,
    		opacity: 1,
    		delay: 0.5
    	}),
    	// Left Ribbon
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEs.eq(11), 0.5, {
    		strokeDashoffset: 0,
    		ease: Power1.easeOut,
    		opacity: 1,
    		delay: 2.25
    	}),
    	// Right Ribbon
    	TweenMax.to(LetteringAnimation.settings.$svgPathsEs.eq(12), 0.5, {
    		strokeDashoffset: 0,
    		ease: Power1.easeOut,
    		opacity: 1,
    		delay: 2.25
    	}),
    	TweenMax.to(LetteringAnimation.settings.$svgEs, 0, {
    		css:{
    			className:'+=es-is-animated'
    		}
      })
		]);
	}
};
var MailChimp = {
	init: function() {
		MailChimp.bind();
	},
	destroy: function() {
		if( $('#mc-embedded-subscribe-form') ){
			$('#mc-embedded-subscribe-form').off('submit');
		}
	},
	bind: function() {
		// When the form inside of the 'notify-state-available' modal is submitted...
		$('body').on('submit', '#mc-embedded-subscribe-form', function(evt) {
			evt.preventDefault();
			MailChimp.submitForm($('#mc-embedded-subscribe-form'));
			return false;
		});
	},
	submitForm: function($form) {
		// ... force jsonp response by:
		// a) tweeking the action attr in the html form, and 
		// b) overriding the name of callback function in the request
		$.ajax({
			type: "GET",
			url: $form.attr("action"),
			data: $form.serialize(),
			cache: false,
			dataType: "jsonp",
			jsonp: "c",
			contentType: "application/json; charset=utf-8",
			error: function(error){
            // According to jquery docs, this is never called for cross-domain JSONP requests
        	},
        	success: function(data){
            	var resultMessage = data.msg || "Sorry. Unable to subscribe. Please try again later."

	            if (data.result != "success") {
	                if (data.msg && data.msg.indexOf("already subscribed") >= 0) {
	                    resultMessage = "You are already subscribed. Thank you!"
	                    $('.modal__main-content').html(resultMessage);
	                }
	            } else {
                	resultMessage = "Thank you!<br><br>Please check your email and follow the directions to confirm your subscription. Once you're subscribed, we'll let you know as soon as ValoraLife becomes available in your state.";
                	$('.modal__main-content').html(resultMessage);
            	}
        	}
		});
	}
}

/*eslint-disable */
var RangeSliders = {
  init: function() {
    this.settings = {
      $target: $('.js-range')
    };

    RangeSliders.bind();
  },
  destroy: function() {
    // Remove event listener
    if( RangeSliders.settings ){
        RangeSliders.settings.$target.each(function() {
          var $range                = $(this),
              $rangeEl              = $range[0],
              thumb                 = $rangeEl.querySelector('.noUi-origin');
          $rangeEl.noUiSlider.off('update');
          $(thumb).off();
          $rangeEl.noUiSlider = null;
        });
    }

    // Reclaim variable
    RangeSliders.settings = null;
  },
  bind: function() {
    RangeSliders.settings.$target.each(function() {
      var $range                = $(this),
          $rangeEl              = $range[0],
          $indicator            = $('#' + $range.data('indicator')),
          $input                = $range.find('input')[0],
          $rangeWrap            = $range.closest('.range-wrap'),
          start                 = $range.data('value'),
          step                  = $range.data('step'),
          min                   = parseInt($range.data('min'), 10),
          max                   = parseInt($range.data('max'), 10),
          thumb,
          newGroupAnsweredCount;

      RangeSliders.buildRangeSliders($rangeEl, start, step, min, max)

      // set the thumb variable once the slider have been created with JS
      thumb = $rangeEl.querySelector('.noUi-origin');

      $rangeEl.noUiSlider.on('update', function( values, handle ) {
        $input.value = values[handle];
        RangeSliders.updateIndicator($range, $indicator);
      });

     RangeSliders.rangeKeyboardSupport(thumb, $rangeEl, step, $range, $rangeWrap);
    });
  },

  updateIndicator: function($range, $indicator) {
    var val     = $range[0].noUiSlider.get(),
        display = parseInt(val,10).toString();

    if ( $range.hasClass('js-range--dollars-no-decimals') ) {
      var numVal = display.replace(/\D+/g, '');

      if ( numVal.length > 0 ) {
        display = '$' + numVal.replace( /(\d)(?=(\d{3})+$)/g, '$1,');
        $indicator.html(display);
      }
    }
    $indicator.html(display);
  },

  rangeKeyboardSupport: function(thumb, $rangeEl, step, $range, $rangeWrap) {
    var $input                = $range.find('input')[0],
        $parentFormGroup      = $range.closest('.js-validate-group'),
        $groupErrorSpan       = $parentFormGroup.find('.js-input-error-msg-span'),
        newGroupAnsweredCount;

    thumb.setAttribute('tabindex', 0);

    thumb.addEventListener('click', function() {
      this.focus()
    });

    thumb.addEventListener('keydown', function(e) {
      var value   = Number($rangeEl.noUiSlider.get()),
          stepNum = Number(step);

      switch ( e.which ) {
        case 37:
        $rangeEl.noUiSlider.set( value - stepNum );
        break;

        case 39:
        $rangeEl.noUiSlider.set( value + stepNum );
        break;
      }
      
    });
  },

  buildRangeSliders: function($rangeEl, start, step, min, max) {
    noUiSlider.create($rangeEl, {
      start: start,
      step: step,
      range: {
        'min': min,
        'max': max
      }
    });
  }
};

/*eslint-disable */
var ResponsiveTables = {
  init: function() {
    this.settings = {
      $table: $('.table--responsive'),
      $toggles: $('.table-toggles')
    };

    ResponsiveTables.bind();
  },

  destroy: function() {
    // Remove Event listener
    if ( ResponsiveTables.settings && ResponsiveTables.settings.$toggles.find('a') ){
        ResponsiveTables.settings.$toggles.find('a').off('click', ResponsiveTables.responsiveTablesToggleClickCallBack);
    }
    // Reclaim varaible
    ResponsiveTables.settings = null;
  },
  bind: function() {

    // first col always shows because it's the title column
    // on load, apply classes to all cols except 1st and 2nd
    // so they hide on mobile (using 'tr > ' so as to target both td and th)
    ResponsiveTables.settings.$table.find('tr > :not(:nth-of-type(1)):not(:nth-of-type(2))').addClass('js-mobile-col-hide');

    // set first button (corresponding to col 2) to be active
    ResponsiveTables.settings.$toggles.find('li:first-of-type a').addClass('js-is-active');

    // clicking a button (need to scope this action to the corresponding table)
    ResponsiveTables.settings.$toggles.find('a').click(ResponsiveTables.responsiveTablesToggleClickCallBack);
  },

  responsiveTablesToggleClickCallBack: function(e){
      e.preventDefault();

      var $this               = $(this);
      var colPos              = $this.data('col-pos');
      var $theseToggles      = $this.closest('.table-toggles');
      var $theseTogglesLinks  = $theseToggles.find('a');
      // the toggles ul has a data-table attribute that can match (and be bound to)
      // on or more tables
      var $thisTable           = $('.' + $theseToggles.data('table'));

      // manage active button states
      $theseTogglesLinks.removeClass('js-is-active');
      $this.addClass('js-is-active');

      // hide all cols except first (title) one (this will also prevent table height from collapsing for a split second)
      $thisTable.find('tr > :not(:nth-of-type(1))').addClass('js-mobile-col-hide');

      // then show the chosen col plus the first one
      $thisTable.find('tr > :nth-of-type(1), tr > :nth-of-type(' + colPos + ')').removeClass('js-mobile-col-hide');
  }
};

/*eslint-disable */
var SimpleScrollTrigger = {
  init: function() {
    this.settings = {
      triggers: $('.js-scroll-trigger'),
      prepAnimationClass: 'js-prep-animation',
      doAnimationClass: 'js-do-animation'
    };

    this.scenes = [];

    SimpleScrollTrigger.bind();
  },

  destroy: function() {
    this.destroyAllScenes();
  },
  bind: function() {

    var _this = this;

    $(SimpleScrollTrigger.settings.triggers).each(function() {

      var $trigger = $(this);


      if ($trigger.length) {
        var sceneName = this.classList[0];

        // get trigger scroll point (aka triggerHook) from data attr.
        // default to onCenter. (0 == onLeave, .5 == onCenter, 1 == onEnter)
        var scrollPoint = $trigger.attr('data-scroll-point') ? $trigger.data('scroll-point')  : 'onCenter';

        // ScrollMagic Scenes
        var controller = new ScrollMagic.Controller();

        // Hide the elements
        $trigger.addClass(SimpleScrollTrigger.settings.prepAnimationClass);

        _this['scene-' + sceneName] = new ScrollMagic.Scene({
          reverse: false,
          triggerElement: '.js-scroll-trigger',
          triggerHook: scrollPoint
        })
        .setClassToggle('.js-scroll-trigger', SimpleScrollTrigger.settings.doAnimationClass)
        .addTo(controller);

        _this.scenes.push(sceneName);
      } // if length

    }); // each

  },
  destroyAllScenes: function() {
    var destroyScene = function(scene) {
      this['scene-' + scene].destroy();
    }.bind(this);

    _.each(this.scenes, destroyScene);
  }
};

/*eslint-disable */
var StickySidebars = {
  init: function() {
    this.settings = {
      trigger: '.js-sticky-parent',
      target: '.js-sticky',
      offset: -100,
      debounceFunc: Utilities.debounce(function() {
        StickySidebars.recheck();
      }, 300)
    };

    StickySidebars.bind();
  },
  destroy: function(){
    if( StickySidebars.settings ){
        $(window).off('resize', StickySidebars.settings.debounceFunc );
    }

    window.onorientationchange = null;

    if (StickySidebars.myScene) { StickySidebars.myScene.destroy(true); }
    StickySidebars.myScene = null;
    StickySidebars.myController = null;
    StickySidebars.settings = null;
  },
  bind: function() {
    if ( $(StickySidebars.settings.trigger).length ) {

      // on load, check whether we need pinning at this size
      // if so, set up
      if ( StickySidebars.needToPin() ) {
        StickySidebars.setup();
      }

      // check need each time window resizes
      $(window).resize(this.settings.debounceFunc);

      // and ipad rotation
      window.onorientationchange = function(){
        StickySidebars.recheck();
      };

    } // if length

  },
  recheck: function() {

    // Destroy
    StickySidebars.myScene.destroy(true);

    // Set up again if we need to
    if ( StickySidebars.needToPin()   ) {
      StickySidebars.setup();
    }

  },

  setup: function() {
    StickySidebars.myController = new ScrollMagic.Controller();

    StickySidebars.myScene = new ScrollMagic.Scene({
      offset:  StickySidebars.settings.offset,
      triggerElement: StickySidebars.settings.trigger,
      triggerHook: 'onLeave'
    });

    StickySidebars.myScene
      .setPin(StickySidebars.settings.target)
      .setClassToggle(StickySidebars.settings.target, 'js-is-pinned')
      .addTo(StickySidebars.myController);


  },

  needToPin: function() {

    var size = Utilities.getSize();
    var stickAtString = $(StickySidebars.settings.trigger).data('stick-at');
    var stickAtArray = stickAtString.split(',');

    var needToPin = $.inArray(size, stickAtArray) !== -1 ;
    return needToPin;
    }
  };

/*eslint-disable */
var Utilities = {
  getSize: function() {
    if (window.getComputedStyle) {
      var sizeString = window.getComputedStyle(document.body,':after').getPropertyValue('content');
      sizeString = sizeString.replace(/["']/g, '');
      return sizeString;
    }
  },
  // http://davidwalsh.name/javascript-debounce-function
  debounce: function(func,wait,immediate) {
    var timeout;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) {
          func.apply(context, args);
        }
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) {
        func.apply(context, args);
      }
    };
  }
};

/* global videojs:false, TweenMax:false, VideoMarkers, Circ:false, Projector:false, VideoOverlayTimings:false, quickShare:false */
/* exported VideoElements */
/*eslint-disable */
var VideoElements = {

  init: function() {
    this.settings = {
      $videoContent: $('.video-content')
    };
    this.bind();
  },

  bind: function() {

    quickShare();

    VideoElements.settings.$videoContent.on('mouseover', function(event) {
      event.preventDefault();
      
      if(!$('body').hasClass('js--video-share-in-view')){
        $('body').addClass('js--video-share-in-view');
      }

      
    });

    VideoElements.settings.$videoContent.on('mouseout', function(event) {
      event.preventDefault();
      
      $('body').removeClass('js--video-share-in-view');
    });

    if ($('#valoraVideo').length > 0) {

      if(videojs.getPlayers()['valoraVideo']) {
        delete videojs.getPlayers()['valoraVideo'];
      }

      this.valoraVideo = videojs('valoraVideo', {
        'poster': this.posterImg,
        'controls': true,
        'preload': 'none',
        'aspectRatio': '1145:647',
        'controlBar': {
          'timeDivider': true,
          'currentTimeDisplay': true,
          'remainingTimeDisplay': false,
          'subtitlesButton': false
        }
      });

      if($('.video--marker-player').length || $('.video--single-player').length){
        this.valoraVideo.on('ended', function(){
          VideoElements.settings.$videoContent.mouseover();
        });
      }

      // Video Markers (homepage video)
      if($('.video--marker-player').length){
        this.buildMarkers(VideoMarkers.EN);
        this.homeOverlay();
        $('.marker-mobile__list-item').bind('click', { _this: this }, this.jumpToTime);
        this.valoraVideo.on('firstplay', this.fadeOutText);
      }

      // Single Video
      if($('.video--single-player').length){
        var scope       = this;
        var videoSource = scope.valoraVideo.options_.sources[0].src;
        var windowWidth = $(window).width();

        scope.videoJsHeight = $('.video-js').outerHeight();
        scope.centerVideo();
        scope.valoraVideo.on('firstplay', scope.animateSingleVideo);

        $(window).on('resize', function(){
          // Check window width has actually changed
          // and it's not just iOS triggering a resize event on scroll.
          // Also check to make sure that centerTop is only called on learn pages.
          if ( $(window).width() != windowWidth && $('.video-content').hasClass('video--single-player') ) {
            // Update the window width for next time
            windowWidth = $(window).width();
            scope.centerVideo();
          }
        });

        // Set the overlays for the learn videos
        scope.learnOverlays(videoSource);
      }
    }
  },

  destroy: function(){
    var oldPlayer = document.getElementById('valoraVideo');
    videojs(oldPlayer).dispose();
  },

  fadeOutText: function() {
    TweenMax.to('.video-text__container', 0.5, {
      opacity: 0,
      ease: Circ.easeOut
    });
  },

  resetText: function() {
    TweenMax.set('.video-text__container', { clearProps: 'all' });
  },

  centerVideo: function(){
    var centerTop = ($('.video-js').outerHeight() - $('.video--single-player').height()) / 2;

    $('.video-js, .video-text__container').css({
      top: centerTop * -1 + 'px'
    });
  },

  animateSingleVideo: function() {
    var videoJsHeight = $('.video-js').outerHeight();

    TweenMax.to('.video-text__container', 0.5, {
      y: -100,
      opacity: 0,
      ease: Circ.easeOut
    });

    TweenMax.to('.video--single-player', 0.5, {
      maxHeight: videoJsHeight,
      ease: Circ.easeOut,
      onComplete: function(){
        TweenMax.set('.video--single-player', { maxHeight: 'none' });
        TweenMax.set('.video--single-player', { height: 'auto' });
      }
    });

    TweenMax.to('.video-js', 0.5, {
      top: 0,
      ease: Circ.easeOut,
      onComplete: function(){
        TweenMax.set('.video-js', { clearProps: 'all' });
      }
    });
  },

  jumpToTime: function(event) {
    var _this = event.data._this;
    var i     = $(this).index();

    if( !$('.spanish-is-active').length ){
      _this.valoraVideo.currentTime(VideoMarkers.EN[i].time);
    } else {
      _this.valoraVideo.currentTime(VideoMarkers.ES[i].time);
    }

    _this.valoraVideo.play();
  },

  learnOverlays: function(videoSource) {
    var scope = this;
    var projectorOverlays;

    if ( videoSource.indexOf('options') !== -1 ) {
      console.log('You are on the learn-options page');
      scope.videoOverlay = videojs('valoraVideo').projector({
        overlays: [
          {
            overlay: Projector.HTMLBox({
              attrs: {
                class: 'overlay--learn-options'
              },
              html: '<a class="overlay__link" href="/product.html"><div class="overlay__btn--transparent"></div></a>'
            }),
            left: '50%',
            bottom: '12%',
            width: '40%',
            height: '13%',
            timings: [{
              start: VideoOverlayTimings.EN[0].start,
              end: VideoOverlayTimings.EN[0].end
            }]
          }
        ]
      });
    } else if ( videoSource.indexOf('apply') !== -1 ) {
      console.log('You are on the learn-apply page');
      scope.videoOverlay = videojs('valoraVideo').projector({
        overlays: [
          {
            overlay: Projector.HTMLBox({
              attrs: {
                class: 'overlay--learn-apply'
              },
              html: '<a class="overlay__link" href="/#quote"><div class="overlay__btn--transparent"></div></a>'
            }),
            left: '50%',
            bottom: '12%',
            width: '40%',
            height: '13%',
            timings: [{
              start: VideoOverlayTimings.EN[1].start,
              end: VideoOverlayTimings.EN[1].end
            }]
          }
        ]
      });
    } else if ( videoSource.indexOf('current') !== -1 ) {
      console.log('You are on the learn-current page');
      scope.videoOverlay = videojs('valoraVideo').projector({
        overlays: [
          {
            overlay: Projector.HTMLBox({
              attrs: {
                class: 'overlay--learn-current'
              },
              html: '<a class="overlay__link" href="/#quote"><div class="overlay__btn--transparent"></div></a>'
            }),
            left: '50%',
            bottom: '12%',
            width: '40%',
            height: '13%',
            timings: [{
              start: VideoOverlayTimings.EN[2].start,
              end: VideoOverlayTimings.EN[2].end
            }]
          }
        ]
      });
    }
    if ( scope.videoOverlay ) {
      projectorOverlays = scope.videoOverlay.overlays;
      scope.setActiveOverlay(projectorOverlays, scope);
    }
  },

  homeOverlay: function() {
    var scope = this;
    var projectorOverlays;

    scope.videoOverlay = videojs('valoraVideo').projector({
      overlays: [
        {
          overlay: Projector.HTMLBox({
            attrs: {
              class: 'overlay--home'
            },
            html: '<a class="overlay__link" href="/product.html"><div class="overlay__btn--transparent"></div></a>'
          }),
          left: '30%',
          bottom: '16%',
          width: '40%',
          height: 'auto',
          timings: [{
            start: VideoOverlayTimings.EN[3].start,
            end: VideoOverlayTimings.EN[3].end
          }]
        },
        {
          overlay: Projector.HTMLBox({
            attrs: {
              class: 'overlay--home-2'
            },
            html: '<a class="overlay__link" href="/#quote"><div class="overlay__btn--transparent"></div></a>'
          }),
          left: '30%',
          bottom: '16%',
          width: '40%',
          height: 'auto',
          timings: [{
            start: VideoOverlayTimings.EN[4].start,
            end: VideoOverlayTimings.EN[4].end
          },
          {
            start: VideoOverlayTimings.EN[5].start,
            end: VideoOverlayTimings.EN[5].end
          }]
        }
      ]
    });

    // Put overlays into variable
    if ( scope.videoOverlay ) {
      projectorOverlays = scope.videoOverlay.overlays;
      scope.setActiveOverlay(projectorOverlays, scope);
    }
  },

  setActiveOverlay: function(overlays, scope) {
    console.log("ACTIVE");
    // Set projector overlay to display none so that the active overlay can receive click events.
    // Without this, the overlays just stack and block click events.
    scope.valoraVideo.on('timeupdate', function() {

      // Check each overlay to see if it is active on time update.
      for ( var i = 0; i < overlays.length; i++ ) {
        var overlay = overlays[i];

        // If the overlay is active, then add the active class to its wrapper div.
        // Also if the overlay is not active but contains the active class, remove the active class.
        if ( overlay.isActive() ) {
          // console.log("this is active");
          overlay.wrapper.classList.add('is-active');
        } else if ( !overlay.isActive() && overlay.wrapper.classList.contains('is-active') ) {
          // console.log("no longer active");
          overlay.wrapper.classList.remove('is-active');
        }
      }
    });
  },

  buildMarkers: function(markers){
    var scope = this;

    this.valoraVideo.markers({
      markerStyle: {
        'width':'20px',
        'height': '20px',
        'background-color': '#ababab',
        'border-radius': '100%'
      },
      markerTip:{
        display: false,
        text: function(marker) {
          if ( marker ) {
            return "Break: "+ marker.text;
          }
        },
        time: function(marker) {
          if ( marker ) {
            return marker.time;
          }
        }
      },
      onMarkerReached: function(marker) {
        if ( marker ) {
          var markerIndex = marker.time;
          $('*[data-marker-time=' + markerIndex + ']').addClass('vjs-marker--active');
        }
      },
      onMarkerClick: function(marker){
        var markerIndex = marker.time;
        var $vjsMarker = $('.vjs-marker');

        $vjsMarker.removeClass('vjs-marker--active');

        $vjsMarker.each(function() {
          var currentMarker = $(this).data('marker-time');

          if(currentMarker <= markerIndex){
            $(this).addClass('vjs-marker--active');
          }
        });
      },
      markers: markers
    });

    this.valoraVideo.on('seeking', function(){
      var $vjsMarker = $('.vjs-marker');
      var _this = this;
      $vjsMarker.each(function() {
        var currentMarker = $(this).data('marker-time');
        if(currentMarker > _this.currentTime()){
          $(this).removeClass('vjs-marker--active');
        } else {
          $(this).addClass('vjs-marker--active');
        }
      });
    });

    this.valoraVideo.on('play', function(){
      var $vjsMarker = $('.vjs-marker');
      if(this.currentTime <= 1){
        $vjsMarker.removeClass('vjs-marker--active');
      }
    });
  }
};

var VideoMarkers = {
	EN : [
    	{time: 0},
    	{time: 74},
    	{time: 137},
    	{time: 203},
    	{time: 271},
    	{time: 333},
    	{time: 399.136}
	],
	ES : [
        {time: 0},
        {time: 79},
        {time: 142},
        {time: 214},
        {time: 287},
        {time: 349},
        {time: 417.28}
	]
};
var VideoOverlayTimings = {
	EN : [
        { name: 'options', start: '63', end: '70' },
        { name: 'apply', start: '52', end: '63' },
        { name: 'current', start: '62', end: '68' },
        { name: 'home-1', start: '266', end: '271' },
        { name: 'home-2', start: '324', end: '333' },
        { name: 'home-3', start: '395', end: '400'}
	],
	ES : [
        { name: 'options', start: '67', end: '75' },
        { name: 'apply', start: '49', end: '62' },
        { name: 'current', start: '62', end: '69' },
        { name: 'home-1', start: '281', end: '287'},
        { name: 'home-2', start: '336', end: '349'},
        { name: 'home-3', start: '413', end: '418'}
    ]
};